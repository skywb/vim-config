[project-init]
command=touch .project && touch CMakeLists.txt && cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES && ln -s build/comple_commands.json .
cwd=$(VIM_CWD)
errorformat=

[project-build]
command=cmake --build build
cwd=<root>
errorformat=%f:%m:%l

[project-run]
command="build/$(VIM_PRONAME)"
cwd=<root>
output=terminal

[project-pwd]
command=pwd
cwd=$(VIM_CWD)
errorformat=


# define a new task named "file-build"
[file-build]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=g++ -std=c++11 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1


[file-run]
command=$(VIM_FILENOEXT)
cwd=$(VIM_FILEDIR)
output=terminal
errorformat=%f:%l:%m

[file-BuildAndRun]
command=g++ -std=c++11 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" && ./$(VIM_FILENOEXT)
cwd=$(VIM_FILEDIR)
output=terminal
errorformat=%f:%l:%m

